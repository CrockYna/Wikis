
        ##::[[---  Windows OpenSSL Config  ---]]::##

# For *nix/bsd users:
    # Use notepad to change all backslashes " \ " to forward slashes " / ". You may also wish to utilize lowercase only, and
    # if you choose to utilize spaces in cert names, ensure you utilize the proper break format, i.e. "./Sophos\ UTM\ CA.crt"

# For Sophos users:
    # Prior to generating user certs, ensure you change "x509_extensions = usr_cert_dn" to "usr_cert_not_dn"  This should  
    # result with "RFC822 Name = user email" in the SubjectAlternativeName of the final user.crt/pem details.  
        # Without this, it will be impossible to authenticate to VPNs on Sophos.

    # Intermediate CAs and Intermediate CA client certs CANNOT be utilized on Sophos UTM due to how Sophos authenticates.

#####################################################################
        ##----- Establish working directory -----##
#####################################################################

DIR                             = .
CNF                             = .\openssl.cnf


#####################################################################
        ##----- Establish CA Profile and Policy -----##
#####################################################################

[ default ]
SOPHOS                          = "Sophos UTM CA"
VPN                             = "WRT1900 VPN CA"
CCA                             = "Sophos VPN CA Chain.pem"

[ ca ]
default_ca                      = CA_default

[ intermediate_ca ]
default_intermediate_ca         = Intermediate_CA_default

#####################################################################

[ CA_default ]
certs                           = $DIR\CRT
new_certs_dir                   = $DIR\CRT

database                        = index
RANDFILE                        = $DIR\rand
serial                          = serial

crldir                          = $DIR\CRL
crlnumber                       = crlnumber
crl                             = "$CRLDIR\$SOPHOS.crl.pem"
default_crl_days                = 3650 

certificate                     = "$DIR\$SOPHOS.crt.pem"
private_key                     = "$DIR\$SOPHOS.key.pem"

default_days                    = 3650
default_md                      = sha512
preserve                        = no

x509_extensions                 = usr_cert_dn
copy_extensions                 = copy
unique_subject                  = no

policy                          = policy_match
name_opt                        = esc_2253,esc_ctrl,esc_msb,sep_comma_plus_space,ignore_type
cert_opt                        = ca_default

#####################################################################

[ Intermediate_CA_default ]
certs                           = $DIR\Intermediate\CRT
new_certs_dir                   = $DIR\Intermediate\CRT

database                        = $DIR\Intermediate\index
RANDFILE                        = $DIR\Intermediate\rand
serial                          = $DIR\Intermediate\serial

crldir                          = $DIR\Intermediate\CRL
crlnumber                       = crlnumber
crl                             = $CRLDIR\crl.pem
default_crl_days                = 3650 

certificate                     = "$DIR\Intermediate\$VPN.crt.pem"
private_key                     = "$DIR\Intermediate\$VPN.key.pem"

default_days                    = 3650
default_md                      = sha512
preserve                        = no

x509_extensions                 = usr_cert_dn
copy_extensions                 = copy
unique_subject                  = no

policy                          = policy_match
name_opt                        = esc_2253,esc_ctrl,esc_msb,sep_comma_plus_space,ignore_type
cert_opt                        = intermediate_ca_default

#####################################################################

[ policy_match ]
countryName                     = match
stateOrProvinceName             = match
organizationName                = match
organizationalUnitName          = match
commonName                      = supplied
emailAddress                    = optional

[ policy_supply ]
countryName                     = match
stateOrProvinceName             = match
organizationName                = match
organizationalUnitName          = match
commonName                      = optional
emailAddress                    = optional


#####################################################################
        ##----- Establish Certificate Options -----#
#--------------------------------------------------------------------

    # If you plan on using TLS ECDHE or ECDH, the bits and hash must exceed the value you wish to have.

      # For example, if one wants 2048bit encryption with an SHA256 hash, encryption value must be
      # greater than 2048 (3072 or 4096) with a hash greater than SHA256 (SHA384 or SHA512).
        # x64 machines can almost always process sha512 faster than sha256

    # Encrypt key is currently commmented out, as one does not want a server's key to have an encrypted password
      # Uncomment if you wish to have a client cert's key encrypted (such as a VPN client cert)


[ req ]
default_bits                    = 3072
default_keyfile                 = private.key.pem
default_md                      = sha512
string_mask                     = utf8only
utf8                            = yes
distinguished_name              = req_distinguished_name
attributes                      = req_attributes 
req_extensions                  = v3_req
x509_extensions                 = v3_ca
copy_extensions                 = copy
string_mask                     = utf8only

# Comment out for server certs #
encrypt_key                     = yes

[ req_attributes ]
 challengePassword              =
 challengePassword_min          = 4
 challengePassword_max          = 40


#####################################################################

[ req_distinguished_name ]

countryNam                      = Country
countryName_mi                  = 2
countryName_ma                  = 2
stateOrProvinceNam              = State
localityNam                     = Locality
0.organizationNam               = Organization
organizationalUnitName          = Organizational Unit
commonName                      = Common Name
commonName_ma                   = 64
emailAddres                     = Email
emailAddress_max                = 64

countryName_default             = US
stateOrProvinceName_default     = State
localityName_default            = Locality
0.organizationName_default      = Sophos UTM
organizationalUnitName_default  = LAN


#####################################################################
    ##----- Establish Additional Certificate Profiles -----##
#####################################################################

    # All server certs should have their loopback IP specified in their SAN profile
      # This prevents certificate errors if connecting to the server via an SSH tunnel

    # Certain OS CA certs must have the loopback IP specified in SAN profile (i.e. Sophos UTM's CA)


#--------------------------------------------------------------------
        ##----- Certificate Authorities -----##
#--------------------------------------------------------------------

# Main #
  [ alt_main_ca ]
  DNS.1                 = Router.1
  IP.1                  = 127.0.0.1

# Router 2 #
  [ alt_router2_ica ]
  DNS.1                 = Router.2
  IP.1                  = 127.0.0.1

# Router 3 #
  [ alt_router3_ica ]
  DNS.1                 = Router.3
  IP.1                  = 127.0.0.1

# Router 4 #
  [ alt_router4_ica ]
  DNS.1                 = Router.4
  IP.1                  = 127.0.0.1


#--------------------------------------------------------------------
    ##----- Certificate Authority Clients -----##
#--------------------------------------------------------------------

# Sophos UTM #

  # Servers #
    [ alt_sophos ]
    IP.1                = 192.168.2.1
    IP.2                = 127.0.0.1
    DNS.1               = SophosUTM
    DNS.2               = your.ddns.com

    [ alt_freenas ]
    IP.1                = 192.168.2.13
    IP.2                = 192.168.2.130
    IP.3                = 127.0.0.1
    DNS.1               = Free.NAS
    DNS.2               = FreeNAS.igb0
    DNS.3               = FreeNAS.igb1

    [ alt_owncloud ]
    IP.1                = 192.168.2.150
    IP.2                = 127.0.0.1
    DNS.1               = OwnCloud.FreeNAS

    [ alt_vpn_server1 ]
    IP.1                = 10.0.0.1
    DNS.1               = your.ddns.com


  # Clients #
    [ alt_vpn1_user1 ]
    email.1             = user1@email.com
    DNS.1               = VPN1-Client1-Device-Hostname1
    DNS.2               = VPN1-Client1-Device-Hostname2


#--------------------------------------------------------------------
    ##----- Intermediate Certificate Authority Clients -----##
#--------------------------------------------------------------------

# Router 2 #

  # Servers #
    [ alt_openwrt ]
    IP.1                = 192.168.2.2
    IP.2                = 127.0.0.1
    DNS.1               = LAN.OpenWrt
    
    [ alt_asrock ]
    IP.1                = 192.168.2.4
    IP.2                = 192.168.2.5
    IP.3                = 127.0.0.1
    DNS.1               = C2750D4I-IPMI
    DNS.2               = C2750D4I-eth0
    DNS.3               = C2750D4I-eth1
    
    [ alt_vpn_server2 ]
    IP.1                = 10.0.1.1
    DNS.1               = your.ddns.com


  # Clients #
    [ alt_vpn2_user1 ]
    DNS.1               = VPNserver-Client1-Device-Hostname
    email.1             = user1@email.com

    [ alt_vpn2_user2 ]
    DNS.1               = VPNserver2-Client2-Device-Hostname1
    DNS.2               = VPNserver2-Client2-Device-Hostname2
    email.1             = user2@email.com


# Router 3 #

  # Servers #
    [ alt_supermicro ]
    IP.1                = 192.168.2.3
    IP.2                = 127.0.0.1
    DNS.1               = SuperMicro.IPMI
    DNS.2               = SuperMicro-IPMI


# Router 4 #

  # Servers #
    [ alt_router4 ]
    IP.1                = 192.168.5.1
    IP.2                = 127.0.0.1
    DNS.1               = Router.4


#####################################################################
    ##----- Establish Certificate Authority V3 Profiles -----##
#--------------------------------------------------------------------

    # These V3 CA profiles must not be modified to contain any more, or any less, KUs
      # These have been configured specifically for security & its imperative no other keyUsages are set


[ v3_ca ]
basicConstraints            = critical, CA:TRUE
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid:always, issuer:always
subjectAltName              = @alt_ca
keyUsage                    = critical, cRLSign, digitalSignature, keyCertSign

[ v3_router2_ica ]
basicConstraints            = critical, CA:TRUE, pathlen:0
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid:always, issuer:always
subjectAltName              = @alt_router2_ica
keyUsage                    = critical, cRLSign, digitalSignature, keyCertSign

[ v3_router3_ica ]
basicConstraints            = critical, CA:TRUE, pathlen:0
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid:always, issuer:always
subjectAltName              = @alt_router3_ica
keyUsage                    = critical, cRLSign, digitalSignature, keyCertSign

[ v3_router4_ica ]
basicConstraints            = critical, CA:TRUE, pathlen:0
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid:always, issuer:always
subjectAltName              = @alt_router4_ica
keyUsage                    = critical, cRLSign, digitalSignature, keyCertSign

[ crl_ext ]
issuerAltName               = issuer:copy
authorityKeyIdentifier      = keyid:always, issuer:always


#####################################################################
    ##----- Establish Generalized V3 Certificate Profiles -----##
#--------------------------------------------------------------------

[ v3_req ]
basicConstraints            = critical, CA:FALSE
subjectKeyIdentifier        = hash

[ usr_cert_dn ]
basicConstraints            = critical, CA:FALSE
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid:always, issuer:always
keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage            = critical, clientAuth, emailProtection

[ usr_cert_not_dn ]
basicConstraints            = critical, CA:FALSE
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid:always, issuer:always
subjectAltName              = email:copy
keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage            = critical, clientAuth, emailProtection


#####################################################################
    ##----- Establish Client Certificate V3 Profiles -----##
#--------------------------------------------------------------------

    # These V3 profiles should not be modified to contain less than what they are currently configured with.
      # I've specifically configured these with security in mind.

    # All servers capable of TLS should contain all keyUsages, except for dataEncipherment
      # VPN and file servers should have all 5 keyUsages set.

    # All servers must contain EKU serverAuth
      # All VPN clients must contain EKU clientAuth


#--------------------------------------------------------------------
    ##----- Certificate Authority Clients -----##
#--------------------------------------------------------------------

# Sophos UTM #

  # Servers #
    [ v3_sophos ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_sophos

    [ v3_freenas ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_freenas

    [ v3_owncloud ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_owncloud

    [ v3_vpn_server1 ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_vpn_server1


  # Clients #
    [ v3_vpn1_user1 ]
    basicConstraints            = critical,CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage            = critical, clientAuth
    subjectAltName              = @alt_vpn1_user1


#--------------------------------------------------------------------
    ##----- Intermediate Certificate Authority Clients -----##
#--------------------------------------------------------------------

# Router 2 #

  # Servers #
    [ v3_openwrt ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_openwrt

    [ v3_asrock ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_asrock

    [ v3_vpn_server2 ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_vpn_server2


  # Clients #
    [ v3_vpn2_user1 ]
    basicConstraints            = critical,CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage            = critical, clientAuth
    subjectAltName              = @alt_vpn2_user1

    [ v3_vpn2_user2 ]
    basicConstraints            = critical,CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage            = critical, clientAuth
    subjectAltName              = @alt_vpn2_user2


# Router 3 #

  # Servers #
    [ v3_supermicro ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_supermicro


# Router 4 #

  # Servers #
    [ v3_router4 ]
    basicConstraints            = critical, CA:FALSE
    subjectKeyIdentifier        = hash
    authorityKeyIdentifier      = keyid:always, issuer:always
    keyUsage                    = critical, nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment, keyAgreement
    extendedKeyUsage            = critical, serverAuth
    subjectAltName              = @alt_router4


#####################################################################
#--------------------------------------------------------------------
        ##----- OpenSSL Commands -----##
#--------------------------------------------------------------------
#####################################################################

#--- Prerequisistes ---#

  # 1. Create "serial" file: echo 00 > serial
    # This file maintains the serial for the most recent cert, in order to know what serial to next assign.
    # Serial is in hex, not dec[imal] format, & one can choose whichever number one wishes to start at.
    
  # 2. Create "crlnumber" file: echo 01 > crlnumber
    # This file maintains the current serial for the CRL [Certificate Revocation List] certificate
    # A CRL should be generated, but will not be used until one revokes a certificate via one's CA or ICA

  # 3. Create "index" file, leave blank
    # This file maintains an index of all certificates issued and is covered under the Index Section below

  # 4. Create "rand" file, leave blank (no extension, just "rand")
    # File is utilized by for random characters & is querried by openssl during certificate/key creation.
 
  # ENCRYPT_KEY [Establish Certificate Options] is currently commented out, however, it's recommended to set it
  # to yes for any use other than a webserver/vpn server, etc.
 
  # Provided you utilize the SubjectAltName section, the Common Name is not required to be the IP/DNS, and
  # can be whatever name you wish it to be
 
 
#####################################################################
#--------------------------------------------------------------------
#####################################################################

  # For VPN Server certs:
    # When creating a VPN server cert using "extendedKeyUsage = serverAuth", in your VPN client config you must
    # change "remote-cert-tls server" to "remote-cert-ku f8". For an explanation: https://www.v13.gr/blog/?p=386

  # For BSD/*nix OSes:
    # Certificates should have 444 permissions
      # chmod 444 ./certificate.crt.pem
    # Keys should have 400 permissions
      # chmod 400 ./certificate.key


#--------------------------------------------------------------------
    ## ----- Certificate Authority ----- ##
#--------------------------------------------------------------------

#--- Generate CA ---#
# openssl req -x509 -new -sha512 -nodes -days 3650 -extensions v3_ca -newkey rsa:4096 -keyout CA.key -out CA.crt.pem -config .\openssl.cnf
 
#--- Generate CA CRL Cert ---#
# openssl ca -config .\openssl.cnf -gencrl -keyfile CA.key -cert CA.crt.pem -out CA.crl.pem
 
#--- Convert CA CRL Cert to DER CRL ---#
# openssl crl -inform PEM -in '.\CA.crl.pem' -outform DER -out '.\CA.crl'


#--------------------------------------------------------------------
    ## ----- Intermediate Certificate Authority ----- ##
#--------------------------------------------------------------------

#--- Gernerate Intermediate CA ---#
# openssl req -out '.\VPN-ICA.csr' -new -days 3650 -sha512 -newkey rsa:4096 -keyout VPN-ICA.key -config .\openssl.cnf -extensions v3_intermediate_ca

#--- Sign Intermediate CA with CA ---#
# openssl x509 -req -sha512 -days 3650 -in '.\VPN-ICA.csr' -CA CA.crt.pem -CAkey CA.key -CAserial .\serial -out VPN-ICA.crt.pem -extfile .\openssl.cnf -extensions v3_intermediate_ca

#--- Generate Intermediate CA CRL Cert ---#
# openssl ca -config .\openssl.cnf -gencrl -keyfile VPN-ICA.key -cert VPN-ICA.crt.pem -out '.\VPN-ICA.crl.pem'
 
#--- Convert Intermediate CA CRL Cert to DER CRL ---#
# openssl crl -inform PEM -in '.\VPN-ICA.crl.pem' -outform DER -out '.\VPN-ICA.crl'


#--- Create Concatenated CA - Intermediate CA Certificate Chain ---#
  # Windows:
    # type .\"VPN-ICA.crt.pem" .\"Sophos UTM CA.crt.pem" >> .\"Sophos VPN CA Chain.pem"
  # *nix/BSD:
    # cat ./"VPN-ICA.crt.pem" ./"Sophos UTM CA.crt.pem" > ./"Sophos VPN CA Chain.pem"


#--- Export VPN Client with an Intermediate CA ---#
# openssl pkcs12 -export -out '.\VPN Client1.p12' -inkey '.\VPN Client1.key.pem' -in '.\VPN Client1.crt.pem' -certfile '.\Sophos VPN CA Chain.crt.pem'

  # The Intermediate CA is still used to sign the certs it issues, however, the CA - Intermediate CA chain cert must 
  # be exported with the client cert & key to maintain the certificate chain of trust of Certificate -> Intermediate CA -> CA.
  # This allows for the certificate path of the client cert to show a hierarchy of CA -> Intermediate CA -> Client


#--------------------------------------------------------------------
    ## ----- Client Certificate ----- ##
#--------------------------------------------------------------------

#--- Request ---#
# openssl req -out '.\OwnCloud.csr' -new -days 3650 -sha512 -newkey rsa:3072 -keyout '.\OwnCloud.key.pem' -config .\openssl.cnf -extensions v3_owncloud
    
  #--- Request with multiple common names ---#
  # openssl req -out '.\Sophos-UTM-VPN-client.csr' -new -days 3650 -sha512 -newkey rsa:3072 -subj "/C=US/ST=ST/L=Locality/O=Sophos UTM/OU=LAN/CN=UserName/CN=User.Name/CN=User_Name/emailAddress=whatever@whichever.com" -keyout '.\Sophos-UTM-VPN-client.key.pem' -config .\openssl.cnf -extensions v3_vpn_client

#--- Sign ---#
# openssl x509 -req -sha512 -days 3650 -in '.\WRT1900ac.csr' -CA ".\Sophos UTM CA.crt.pem" -CAkey ".\Sophos UTM CA.key.pem" -CAserial .\serial -out '.\CRT\WRT1900ac.crt.pem' -extfile .\openssl.cnf -extensions v3_owncloud

#--- Export ---#
# openssl pkcs12 -export -out '.\OwnCloud.p12' -inkey '.\OwnCloud.key.pem' -in '.\OwnCloud.crt.pem' -certfile CA.crt.pem


#--------------------------------------------------------------------
    ## ----- Verification of Certificates ----- ##
#--------------------------------------------------------------------

#--- Verify Certificate Signing Request (CSR) ---#
# openssl req -text -noout -verify -in CSR.csr

#--- Verify private key ---#
# openssl rsa -check -in private.key

#--- Verify Certificate ---#
# openssl x509 -text -noout -in certificate.crt

#--- Verify PKCS12 Certificate [.pfx/.p12] ---#
# openssl pkcs12 -info -in certificate.p12


#--------------------------------------------------------------------
    ## ----- Intermediate CA Android Build Certificates ----- ##
#--------------------------------------------------------------------

    # This will apply to the following six certificates: media, platform, releasekeys, shared, superuser, testkey
    # i.e. the following steps will need to be repeated for each of the six


#--- Generate Individual Intermediate Build CA Request ---#
# openssl req -out '.\media.csr' -new -days 3650 -sha512 -config .\openssl.cnf -extensions v3_intermediate_ca -newkey rsa:4096f4 -ouform PEM -keyout '.\media.key.pem'

#--- Convert PEM key to PK8 ---#
# openssl pkcs8 -in media.key.pem -topk8 -outform DER -out media.pk8 -nocrypt

#--- Sign Individual Intermediate Build CA Request ---#
# openssl x509 -req -sha512 -days 3650 -in '.\media.csr' -CA CA.crt.pem -CAkey CA.key -CAserial .\serial -out '.\media.x509.pem' -extfile .\openssl.cnf -extensions v3_intermediate_ca


#--- Generate Individual Intermediate Build CA CRL Cert ---#
# openssl ca -config .\openssl.cnf -gencrl -keyfile '.\media.key.pem' -cert '.\media.x509.pem' -out '.\media.crl.pem' -extfile '.\openssl.cnf' -extensions crl_ext

#--- Convert Individual Intermediate Build CA CRL Cert to DER CRL ---#
# openssl crl -inform PEM -in '.\media.crl.pem' -outform DER -out '.\media.crl'


#--- Create Concatenated Individual Intermediate Build CA and CA into PEM Certificate ---#
  # Windows:
    # type "media.x509.pem" "Sophos UTM CA.crt.pem" >> "Android-Media-CA-Chain.pem"
  # *nix/BSD:
    # cat ./"media.x509.pem" ./"Sophos UTM CA.crt.pem" > ./"Android-Media-CA-Chain.pem"


#--- Create PKCS12 for import into keystore ---#
# openssl pkcs12 -export -out .\media.p12 -inkey .\media.key.pem -in .\media.x509.pem  -certfile .\"Android-Media-CA-Chain.pem" -password pass:media -name media

    # The Intermediate CA is still used to sign packages/images, however, the CA - Intermediate CA chain cert must 
    # be exported with the client cert & key to maintain the certificate chain of trust of: Package/Image -> Intermediate CA -> CA.
    # This allows for the certificate path of the signed packages/images to show a hierarchy of: CA -> Intermediate CA -> Package/Image


#--- Copy the following files into your build directory (location will vary depending on ROM) ---#
    # For each of the six: *.x509.pem, *.pk8, Android-*-CA-Chain.pem, *.p12
    # i.e. media.x509.pem, media.pk8, Android-Media-CA-Chain.pem, media.p12

# --- One example of how to import into keystore prior to build ---#
  # Source: http://stackoverflow.com/questions/22212869/how-can-i-generate-an-android-keystore-from-a-key-pk8-and-certificate-pem

    # keytool -importkeystore -deststorepass password -destkeystore .keystore -srckeystore media.p12 -srcstoretype PKCS12 -srcstorepass media
    # keytool -list -v -keystore .keystore


#####################################################################
#-------------------------------------------------------------------- 
#####################################################################
        ##---- Index File -----##
#--------------------------------------------------------------------

  # If you wish to maintain the index file automatically, you'll need to use "openssl ca" to sign certs.
  # You can manually maintain the index file, by inputting 1 cert entry per line in the following format:
 
  # V    251201090544Z    0a    unknown    /C=US/ST=State/L=Locality/O=Sophos UTM/OU=LAN/CN=Cert Common Name/emailaddress=whatever@whichever.com
  # 1    2----------->    4->   5----->    6--------------------------------------------------------------------------------------------------->
 
    # 1. V [Valid] R [Revoked] E [Expired]
    # 2. Expiration Date [Format: YYMMDDHHMMSS followed by "Z"]
    # 3. Revocation Date [(Empty if not revoked) Format: YYMMDDHHMMSSZ,reason]
    # 4. Serial # [0a is hex for 10]
        # Windows has a programmer calculator feature that can convert dec <-> hex
    # 5. unknown [Certificate filename or literal string "unknown"]
    # 6. Distinguished Name


#--------------------------------------------------------------------
#####################################################################
        ##----- Key Usage -----##
#--------------------------------------------------------------------

#--- digitalSignature ---#
  # Certificates with this flag set can be used to apply a digital signature. Digital signatures are often used for entity 
  # authentication and data origin authentication with integrity.
 
#--- nonRepudiation ---#
  # Certificates with this flag set can be used to sign data as above but the certificate public key may be used to provide 
  # non-repudiation services preventing the signing entity from falsely denying some action.

#--- keyEncipherment ---#
  # Certificates with this flag set may be used by the subject to encrypt a symmetric key which is then transferred to the 
  # target, decrypted, and subsequently used to encrypt and decrypt data sent between the two entities. 

#--- dataEncipherment ---#
  # Certificates with this flag set can be used by the subject to encrypt and decrypt actual application data.

#--- keyAgreement ---#
  # Certificates with this flag set enable the subject to use a key agreement protocol, such as Diffie-Hellman, to establish 
  # a symmetric key with a target that may then be used to encrypt and decrypt data sent between the two entities


#--------------------------------------------------------------------
#####################################################################
        ##----- Extended Key Usage -----##
#--------------------------------------------------------------------

#--- serverAuth ---#
  # SSL/TLS Web/VPN Server authentication EKU which is assigned to a server and distinguishes them as a server for which
  # clients can authenticate against.  All VPN servers should be signed with this EKU present.  This supercedes nscertype options,
  # as the "ns" in nscertype stands for NetScape [browser], which hasn't existed for some time.

#--- clientAuth ---#
  # SSL/TLS Web/VPN Client authentication EKU which is assigned to a server client, and distinguishes them as a client only.
  # All VPN clients should be signed with this EKU present.

#--- codeSigning ---#
  # Code Signing... self explanatory

#--- emailProtection ---#
  # Email Protection via S/MIME, allows you to send and receive encrypted emails

#--- timeStamping ---#
  # Trusted Timestamping... self explanatory

#--- OCSPSigning ---#
  # OCSP Signing... self explanatory

#--- ipsecIKE
  # IPSec Internet Key Exchange, of which I believe is in the same boat as the three below, however some research needs to be
  # performed to determine if this is an EKU that should no longer be utilized.  I do know clientAuth can be utilized in a IPSec
  # VPN client cert.

#--- ipsecEndSystem, ipsecTunnel, & ipsecUser ---#
  # Should NOT be utilized! 
    # There were three IPsec-related object identifiers in EKU that were assigned in 1999, and the semantics of these values
    # were never clearly defined. The use of these three EKU values in IKE/IPsec is obsolete and explicitly deprecated
    # by this specification. CAs SHOULD NOT issue certificates for use in IKE with them.

#--- msCodeInd ---#
  # Microsoft Individual Code Signing (authenticode)... self explanatory

#--- msCodeCom ---#
  # Microsoft Commerical Code Signing (authenticode)... self explanatory

#--- mcCTLSign ---#
  # Microsoft Trust List Signing... self explanatory

#--- msEFS ---#
  # Microsoft Encrypted File System... self explanatory


#--------------------------------------------------------------------
#####################################################################
        ##----- Key Exchange Algorithms  -----##
#--------------------------------------------------------------------

#--- RSA ---#
  # Key exchange occurs via encryption of a random value [chosen by the client] via the server public key. This requires the
  # server public key to be an RSA key, and the server certificate must utilize the "keyAgreement" keyUsage extension).

#--- DH_RSA ---#
  # Key exchange occurs via a static Diffie-Hellman key. Server Public Key must be a Diffie-Hellman key, of which must have been
  # issued by a CA that was using an RSA key signing key.

#--- DH_DSA ---#
  # Like DH_RSA, except that the CA used a DSA key in lieu of RSA.

#--- DHE_RSA ---#
  # Key exchange occurs via an ephemeral Diffie-Hellman; the server dynamically generates & signs a DH public key, sending it to
  # the client. Server Public Key must be an RSA key, and it's certificate must utilize the digitalSignature keyUsage extension

#--- DHE_DSA ---#
  # Like DHE_RSA, except that the CA used a DSA key in lieu of RSA.


#--------------------------------------------------------------------
#####################################################################
        ##----- Elliptic-Curve Key Exchange Algorithms -----##
#--------------------------------------------------------------------

#--- ECDH_ECDSA ---# 
  # Like DH_DSA, but with elliptic curves: the server public key must be an ECDH key, with a certificate issued by a CA which 
  # utilized an ECDSA public key.

#--- ECDH_RSA ---# 
  # Like ECDH_ECDSA, except that the CA used an RSA key

#--- ECDHE_ECDSA ---# 
  # The server sends a dynamically generated EC Diffie-Hellman key and signs it with its own ECDSA key. This is equivalent to
  # DHE_DSS, but with elliptic curves for both the Diffie-Hellman and signature.

#--- ECDHE_RSA ---# 
  # Like ECDHE_ECDSA, except that the server public key is an RSA key, utilized for signing the ephemeral elliptic-curve Diffie-Hellman key.


#--------------------------------------------------------------------
#####################################################################
